1) create a c2d vector and create another class vector c3d. 

class C2dVec:
    def __init__(self,i,j):
        self.icap = i
        self.jcap = j
     
    def __str__(self):
         return f"{self.icap}i + {self.jcap}j"   
        
class C3dVec(C2dVec):
    def __init__(self,i,j,k):
        super().__init__(i,j)
        self.kcap = k
                   
    def __str__(self):
        return f"{self.icap}i + {self.jcap}j + {self.kcap}k"
    
v2d = C2dVec(1,3)
v3d = C3dVec(1,9,7)
print(v2d)
print(v3d)

output

1i + 3j
1i + 9j + 7k

2) create a class pet from a class animal and further create a class dog from pet add method bark  to class dog.

class Animals:
    animaltype = "Mammal"
    
class Pets:
    color = "White"
    
class Dog:
    @staticmethod
    def bark():
        print("Bow Bow")
        
d = Dog()
d.bark()

output
bow bow

3) create a class employ and add salary and increment properties to it. write a method salaryafter increment method with a property decoder with a setter changes the value of increment based on salary

class Employee:
    salary = 3000
    increment = 1.5
    @property
    def salaryAfterIncrement(self):
        return self.salary*self.increment
    
    @salaryAfterIncrement.setter
    def salaryAfterIncrement(self,sai):
        self.increment = sai/self.salary
            
e = Employee()
print(e.salaryAfterIncrement)


output
4500

4) write str__ method to print the vector as follow.

class Vector:
    def __init__(self,vec):
        self.vec = vec
     
    def __str__(self):
        return f"{self.vec[0]}i + {self.vec[1]}j + {self.vec[2]}k"

v1 = Vector([1,2,3])
v2 = Vector([4,5,6])
print(v1)
print(v2)

output
1i + 2j + 3k
4i + 5j + 6k







